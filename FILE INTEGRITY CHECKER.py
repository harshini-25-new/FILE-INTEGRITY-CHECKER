# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

from google.colab import files

# This will open a file chooser for you to upload files
uploaded = files.upload()

from google.colab import files
import zipfile
import os

# Upload the zip file
uploaded = files.upload()

# Extract the zip file
for file_name in uploaded.keys():
    if file_name.endswith('.zip'):
        with zipfile.ZipFile(file_name, 'r') as zip_ref:
            zip_ref.extractall('/content/')
        print(f"Extracted: {file_name}")

!ls /content/

directory_to_monitor = '/content/'  # Monitor the whole /content directory

directory_to_monitor = '/contnt/sample_data'

import os
import hashlib
import json

def calculate_file_hash(file_path, hash_function='sha256'):
    """Calculate the hash of a file using the specified hash function."""
    hash_func = getattr(hashlib, hash_function)()
    try:
        with open(file_path, 'rb') as f:
            while chunk := f.read(4096):
                hash_func.update(chunk)
        return hash_func.hexdigest()
    except FileNotFoundError:
        print(f"[ERROR] File not found: {file_path}")
        return None

def create_hash_database(directory, output_file, hash_function='sha256'):
    """Creates a hash database for all files in the specified directory."""
    hash_database = {}
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = calculate_file_hash(file_path, hash_function)
            if file_hash:
                hash_database[file_path] = file_hash
    with open(output_file, 'w') as f:
        json.dump(hash_database, f, indent=4)
    print(f"[INFO] Hash database created and saved to {output_file}")

def check_file_integrity(hash_database_file, hash_function='sha256'):
    """Checks the integrity of files by comparing hashes with stored values."""
    try:
        with open(hash_database_file, 'r') as f:
            stored_hashes = json.load(f)
    except FileNotFoundError:
        print(f"[ERROR] Hash database not found: {hash_database_file}")
        return

    print("[INFO] Checking file integrity...")
    for file_path, stored_hash in stored_hashes.items():
        current_hash = calculate_file_hash(file_path, hash_function)
        if current_hash is None:
            print(f"[WARNING] File missing: {file_path}")
        elif current_hash != stored_hash:
            print(f"[ALERT] File modified: {file_path}")
        else:
            print(f"[OK] File intact: {file_path}")

print("Functions loaded successfully!")

directory_to_monitor = '/content/sample_files'  # Replace with your folder path
output_file = 'hash_database.json'

create_hash_database(directory_to_monitor, output_file)

check_file_integrity(output_file)